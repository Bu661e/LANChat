基于Python的局域网聊天室实验报告

1. 实验目的
1.1 技术掌握
- 深入理解Socket网络编程的基本原理和实现方法
- 掌握TCP/IP协议在实际应用中的使用方式和注意事项
- 学习多线程编程技术，理解并发处理的重要性
- 熟悉JSON数据格式在网络通信中的应用

1.2 实践目标
- 实现一个功能完整的局域网聊天室系统
- 开发具有良好用户体验的图形界面
- 实现可靠的文件传输功能
- 支持多种类型的消息通信

2. 实验环境
2.1 硬件环境
- 处理器：Intel Core i5或更高
- 内存：8GB或更高
- 网络：支持TCP/IP的局域网环境

2.2 软件环境
- 操作系统：Windows 10/11
- Python版本：Python 3.8或更高版本
- 开发工具：Visual Studio Code

2.3 主要依赖库
- socket：提供底层网络通信功能
- PySide6：用于构建现代化的图形用户界面
- threading：实现多线程处理
- json：处理数据序列化和反序列化
- datetime：处理时间戳和日期格式化
- base64：处理二进制数据的编码和解码

3. 系统架构
3.1 服务器端（Server）
3.1.1 核心功能
- 采用TCP Socket实现可靠的网络通信
- 支持多客户端并发连接和通信
- 使用多线程技术处理客户端消息
- 实现用户管理和消息转发功能
- 处理异常情况和连接断开

3.1.2 数据处理
- 使用JSON格式处理所有类型的消息
- 实现消息的分块传输和重组
- 处理大文件传输的分段发送
- 维护在线用户列表和状态信息

3.2 客户端（Client）
3.2.1 用户界面
- 使用PySide6实现现代化的图形界面
- 提供直观的用户登录界面
- 实现群聊和私聊的切换功能
- 支持文件拖拽和选择功能
- 显示在线用户列表和状态

3.2.2 功能模块
- 实现用户登录和身份验证
- 支持群聊（广场）消息发送和接收
- 提供私聊功能，支持点对点通信
- 支持多媒体消息（图片、视频、音频）
- 实现文件传输功能，支持进度显示

4. 详细功能实现
4.1 用户管理系统
4.1.1 用户登录
- 支持自定义用户名
- 验证用户名的唯一性
- 记录用户IP地址和端口信息
- 广播新用户登录通知

4.1.2 用户状态管理
- 实时维护在线用户列表
- 处理用户异常断开情况
- 发送用户登出通知
- 更新用户状态显示

4.2 消息通信系统
4.2.1 文本消息
- 群聊消息广播
- 私聊消息定向发送
- 消息发送时间戳
- 消息发送状态显示

4.2.2 多媒体消息
- 支持图片预览和发送
- 支持视频文件传输
- 支持音频消息录制和播放
- 支持文件的发送和接收

5. 关键代码实现
5.1 服务器端实现
5.1.1 服务器初始化和配置
def start(self, host='192.168.31.227', port=8000):
    # 创建TCP Socket对象
    self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # 设置地址重用，避免端口占用问题
    self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    # 绑定服务器地址和端口
    self.server_socket.bind((self.host, self.port))
    # 开始监听连接，最大连接数为5
    self.server_socket.listen(5)

5.1.2 客户端连接处理
def accept_connections(self):
    while self.running:
        try:
            # 接受新的客户端连接
            client_socket, address = self.server_socket.accept()
            print(f"新的连接: {address}")
            
            # 为每个客户端创建独立的处理线程
            client_thread = threading.Thread(
                target=self.receive_messages,
                args=(client_socket, address)
            )
            client_thread.daemon = True  # 设置为守护线程
            client_thread.start()
            
        except socket.timeout:
            continue  # 超时后继续循环
        except Exception as e:
            if self.running:
                print(f"接受连接失败: {e}")
            break

5.2 客户端实现
5.2.1 连接服务器
def connect_to_server(self, server_ip, server_port, local_ip, local_port, username):
    # 保存连接参数
    self.server_ip = server_ip
    self.server_port = int(server_port)
    self.local_ip = local_ip
    self.local_port = int(local_port)
    self.username = username

    # 创建socket连接
    self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    self.socket.bind((self.local_ip, self.local_port))
    self.socket.connect((self.server_ip, self.server_port))

5.2.2 消息发送机制
def send_message(self, message):
    # 将消息转换为JSON格式
    message_json = json.dumps(message)
    # 计算消息长度
    message_length = len(message_json.encode())
    # 将长度转换为4字节
    length_bytes = message_length.to_bytes(4, 'big')
    # 发送消息长度
    self.socket.sendall(length_bytes)
    # 发送消息内容
    self.socket.sendall(message_json.encode())

6. 通信协议设计
6.1 消息格式设计
所有消息采用JSON格式，包含以下基本字段：
- type: 消息类型标识符
- username: 发送者的用户名
- content: 消息的具体内容
- timestamp: 消息发送的时间戳
- 特定类型消息的额外字段

6.2 消息类型定义
6.2.1 系统消息
- login: 用户登录请求
  - username: 用户名
  - local_ip: 本地IP地址
  - local_port: 本地端口号
  - timestamp: 登录时间

- logout: 用户登出通知
  - username: 用户名
  - timestamp: 登出时间

- new_friend_login: 新用户上线通知
  - username: 新用户名
  - local_ip: 新用户IP
  - local_port: 新用户端口
  - timestamp: 上线时间

- one_user_logout: 用户下线通知
  - username: 用户名
  - local_ip: 用户IP
  - local_port: 用户端口
  - timestamp: 下线时间

6.2.2 聊天消息
- square_message: 群聊文本消息
  - username: 发送者
  - content: 消息内容
  - timestamp: 发送时间

- private_message: 私聊文本消息
  - username: 发送者
  - target_ip: 接收者IP
  - target_port: 接收者端口
  - content: 消息内容
  - timestamp: 发送时间

6.2.3 多媒体消息
- square_image/private_image: 图片消息
  - image_data: Base64编码的图片数据
  - image_ext: 图片格式扩展名
  - file_name: 文件名

- square_video/private_video: 视频消息
  - video_data: Base64编码的视频数据
  - video_ext: 视频格式扩展名
  - file_name: 文件名

- square_audio/private_audio: 音频消息
  - audio_data: Base64编码的音频数据
  - audio_ext: 音频格式扩展名
  - file_name: 文件名

- square_file/private_file: 文件消息
  - file_data: Base64编码的文件数据
  - file_ext: 文件扩展名
  - file_name: 文件名

7. 实验总结
7.1 实验成果
成功实现了一个功能完整的局域网聊天室系统：
- 建立了稳定可靠的服务器-客户端通信架构
- 开发了直观美观的图形用户界面
- 实现了丰富的消息类型支持
- 提供了可靠的文件传输功能
- 支持实时的用户状态更新

7.2 技术要点
在实验过程中掌握了以下关键技术：
- 使用TCP Socket实现可靠的网络通信
- 采用多线程技术提高系统并发性能
- 设计并实现了完整的消息通信协议
- 实现了大文件的分块传输机制
- 使用JSON进行数据序列化和反序列化
- 运用PySide6开发现代化的图形界面

7.3 创新特点
- 支持多种类型的消息传输
- 实现了直观的文件拖拽功能
- 提供了实时的消息发送状态
- 支持大文件的断点续传
- 实现了优雅的异常处理机制

7.4 可改进之处
1. 安全性增强
- 添加数据加密功能
- 实现用户身份认证
- 添加消息完整性验证

2. 功能扩展
- 实现消息持久化存储
- 添加消息撤回功能
- 支持表情包功能
- 实现语音通话功能

3. 性能优化
- 优化大文件传输性能
- 实现文件传输断点续传
- 添加消息压缩功能
- 优化内存使用效率

4. 架构升级
- 实现服务器集群部署
- 添加负载均衡功能
- 实现数据库存储功能
- 支持分布式部署

8. 参考文献
[1] Python官方文档 - Socket编程
[2] PySide6官方文档
[3] TCP/IP详解 卷1：协议
[4] Python网络编程指南